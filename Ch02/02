{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c736dd2d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3 x 1 = 3\n",
      "3 x 2 = 6\n",
      "3 x 3 = 9\n",
      "3 x 4 = 12\n",
      "3 x 5 = 15\n",
      "3 x 6 = 18\n",
      "3 x 7 = 21\n",
      "3 x 8 = 24\n",
      "3 x 9 = 27\n"
     ]
    }
   ],
   "source": [
    "#while문 사용하여 구구단 출력\n",
    "num = int(input())\n",
    "count = 1\n",
    "\n",
    "while count <= 9 :\n",
    "    print(f\"{num} x {count} = {num*count}\")\n",
    "    count +=1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ef7ac0ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "99 x 1 = 99\n",
      "99 x 2 = 198\n",
      "99 x 3 = 297\n",
      "99 x 4 = 396\n",
      "99 x 5 = 495\n",
      "99 x 6 = 594\n",
      "99 x 7 = 693\n",
      "99 x 8 = 792\n",
      "99 x 9 = 891\n"
     ]
    }
   ],
   "source": [
    "#while문 사용하여 구구단 출력 > 입력을 문자로 받을 경우\n",
    "num = input()\n",
    "tlqkf = ord(num)\n",
    "count = 1\n",
    "\n",
    "while count <= 9 :\n",
    "    print(f\"{tlqkf} x {count} = {tlqkf*count}\")\n",
    "    count +=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7e1f182a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3 x 1 = 3\n",
      "3 x 2 = 6\n",
      "3 x 3 = 9\n",
      "3 x 4 = 12\n",
      "3 x 5 = 15\n",
      "3 x 6 = 18\n",
      "3 x 7 = 21\n",
      "3 x 8 = 24\n",
      "3 x 9 = 27\n"
     ]
    }
   ],
   "source": [
    "#for문 사용하여 구구단 출력\n",
    "num = int(input())\n",
    "\n",
    "for i in range(1,10):\n",
    "    print(f\"{num} x {i} = {num*i}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d4537191",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "prime_num\n"
     ]
    }
   ],
   "source": [
    "#사용자에게 숫자를 입력 받고 숫자가 소수인지 판별하는 프로그램\n",
    "def check_prime_num(num):\n",
    "    count = 0\n",
    "    for i in range(2,num):\n",
    "        if num % i == 0:\n",
    "            count+=1\n",
    "\n",
    "    if count == 0:\n",
    "        return \"prime_num\"\n",
    "    \n",
    "    else: \n",
    "        return \"not prime_num\"\n",
    "\n",
    "\n",
    "num = int(input())\n",
    "print(check_prime_num(num))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "98b2a565",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "원금: 30000000.0, 이자: 4828069.529999994\n"
     ]
    }
   ],
   "source": [
    "#예금 이자 계산기\n",
    "\n",
    "#p' = p * (1+r)^n\n",
    "# p' = 원리금, p: 거치금액, r=연간이율, n=거치 연수\n",
    "\n",
    "def interest_year(p,r,n):\n",
    "    return p * pow((1+r),n)\n",
    "\n",
    "p,r,n = list(map(float, input().split()))\n",
    "result = interest_year(p,r,n)\n",
    "print(f\"원금: {p}, 이자: {result - p}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83cef3a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "가로 입력: 10\n",
      "세로 입력: 20\n",
      "넓이: 200\n"
     ]
    }
   ],
   "source": [
    "class Rectangle:\n",
    "    def __init__(self, width, height):\n",
    "        self.width = width\n",
    "        self.height = height\n",
    "        self.area = width * height\n",
    "\n",
    "    #def area(self):\n",
    "      #return self.width * self.height \n",
    "    # self.area = width * height > 이 문장 안쓰고 area 함수 쓰면 print에서 rece.area()로 출력 해야함 *** \n",
    "\n",
    "width = int(input())\n",
    "height = int(input())\n",
    "rect = Rectangle(width,height)\n",
    "\n",
    "print(f\"가로 입력: {width}\")\n",
    "print(f\"세로 입력: {height}\")\n",
    "print(f\"넓이: {rect.area}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
